{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{86:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return o})),n.d(t,\"metadata\",(function(){return l})),n.d(t,\"rightToc\",(function(){return s})),n.d(t,\"default\",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(96)),o={id:\"installation\",title:\"Introduction\"},l={unversionedId:\"android-sdk/installation\",id:\"android-sdk/installation\",isDocsHomePage:!1,title:\"Introduction\",description:\"XPay KotlinUtils is an SDK for integrating payments through XPay with android development written in kotlin.\",source:\"@site/docs/android-sdk/installation.mdx\",slug:\"/android-sdk/installation\",permalink:\"/docs/android-sdk/installation\",version:\"current\",sidebar:\"docs\",previous:{title:\"Woo-Commerce XPay Plugin\",permalink:\"/docs/woo-commerce\"},next:{title:\"XpayUtils\",permalink:\"/docs/android-sdk/xpayutils\"}},s=[{value:\"Installation\",id:\"installation\",children:[]},{value:\"Usage\",id:\"usage\",children:[{value:\"Make payment\",id:\"make-payment\",children:[]},{value:\"Get transaction info\",id:\"get-transaction-info\",children:[]}]},{value:\"Switching to Production server\",id:\"switching-to-production-server\",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,[\"components\"]);return Object(i.a)(\"wrapper\",Object(a.a)({},c,n,{components:t,mdxType:\"MDXLayout\"}),Object(i.a)(\"p\",null,\"XPay KotlinUtils is an SDK for integrating payments through XPay with android development written in kotlin.\"),Object(i.a)(\"h2\",{id:\"installation\"},\"Installation\"),Object(i.a)(\"p\",null,\"KotlinUtils is available through jitpack\"),Object(i.a)(\"ol\",null,Object(i.a)(\"li\",{parentName:\"ol\"},\"Add the following line in your root build.gradle at the end of repositories:\")),Object(i.a)(\"pre\",null,Object(i.a)(\"code\",Object(a.a)({parentName:\"pre\"},{}),\"allprojects {\\n    repositories {\\n        ...\\n        maven { url 'https://jitpack.io' }\\n    }\\n}\\n\")),Object(i.a)(\"ol\",{start:2},Object(i.a)(\"li\",{parentName:\"ol\"},\"Add the dependencies\")),Object(i.a)(\"pre\",null,Object(i.a)(\"code\",Object(a.a)({parentName:\"pre\"},{}),\"dependencies {\\n    implementation 'com.github.xpayeg:Android-kotlin-sdk:1.0'\\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'\\n    implementation \\\"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha02\\\"\\n}\\n\")),Object(i.a)(\"p\",null,\"Click \",Object(i.a)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://jitpack.io/#xpayeg/Android-kotlin-sdk\"}),\"here\"),\" for more installation options other than gradle.\"),Object(i.a)(\"h2\",{id:\"usage\"},\"Usage\"),Object(i.a)(\"h3\",{id:\"make-payment\"},\"Make payment\"),Object(i.a)(\"pre\",null,Object(i.a)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-java\"}),'import com.xpay.kotlinutils.XpayUtils\\nimport com.xpay.kotlinutils.models.BillingInfo\\n\\n// set XpayUtils core settings\\n// The following settings are for testing purposes only\\nXpayUtils.apiKey = \"Cce74Y3B.J0P4tItq7hGu2ddhCB0WF5ND1eTubkpT\"\\nXpayUtils.communityId = \"m2J7eBK\"\\nXpayUtils.apiPaymentId = 60\\n// default server settings are testing servers which is equivalent to\\n// XpayUtils.serverSetting = ServerSetting.TEST\\n\\nlifecycleScope.launch {\\n    try {\\n        val res = XpayUtils.prepareAmount(50)\\n        // read active payment methods list and set payUsing property\\n        // this test community returns CARD and KIOSK payment options\\n        // the following line is equivalent to XpayUtils.payUsing = XpayUtils.activePaymentMethods[0]\\n        XpayUtils.payUsing = PaymentMethods.CARD\\n        // read the total amount of card payment\\n        // this is also equivalent to\\n        // val totalAmount = res?.totalAmount!!\\n        val totalAmount = XpayUtils.PaymentOptionsTotalAmounts?.card!!\\n        // set billing information\\n        XpayUtils.billingInfo = BillingInfo( \"John Doe\", \"j.doe@test.com\", \"+201111111111\")\\n        // make payment\\n        val paymentRespone = XpayUtils.pay()\\n        // get payment form url and navigate to it to complete your payment\\n        val formUrl = paymentRespone?.iframe_url!!\\n        val builder = CustomTabsIntent.Builder()\\n        builder.setToolbarColor(resources.getColor(R.color.colorPrimary))\\n        builder.setShowTitle(true)\\n        val customTabsIntent: CustomTabsIntent = builder.build()\\n        customTabsIntent.launchUrl(this@MainActivity, Uri.parse(response.iframe_url))\\n        //in case of KIOSK payment method, read the message respone which contains your payment reference number from AMAN\\n        // val formUrl = paymentRespone?.message!!\\n\\n        // that\\'s it !\\n    } catch (e: Exception) {\\n        e.message?.let { msg -> displayError(msg) }\\n    }\\n}\\n')),Object(i.a)(\"h3\",{id:\"get-transaction-info\"},\"Get transaction info\"),Object(i.a)(\"pre\",null,Object(i.a)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-java\"}),'import com.xpay.kotlinutils.XpayUtils\\n\\n// set XpayUtils core settings\\n// The following settings are for testing purposes only\\nXpayUtils.apiKey = \"Cce74Y3B.J0P4tItq7hGu2ddhCB0WF5ND1eTubkpT\";\\nXpayUtils.communityId = \"m2J7eBK\";\\nXpayUtils.apiPaymentId = 60;\\n// default server settings are testing servers which is equivalent to\\n// XpayUtils.serverSetting = ServerSetting.TEST\\n\\nlifecycleScope.launch {\\n    try {\\n        val response = XpayUtils.getTransaction(it)\\n        // read transaction status and amount\\n        val status = respone.status\\n        val totalAmount = respone.total_amount\\n\\n        // that\\'s it !\\n    } catch (e: Exception) {\\n        e.message?.let { errMsg -> displayError(errMsg) }\\n    }\\n}\\n')),Object(i.a)(\"h2\",{id:\"switching-to-production-server\"},\"Switching to Production server\"),Object(i.a)(\"p\",null,\"By default XpayUtils will make all the requests to XPay testing server, to switch to Production server set \",Object(i.a)(\"inlineCode\",{parentName:\"p\"},\"XpayUtils.serverSetting\"),\" property to \",Object(i.a)(\"inlineCode\",{parentName:\"p\"},\"ServerSetting.LIVE\"),\".\"),Object(i.a)(\"pre\",null,Object(i.a)(\"code\",Object(a.a)({parentName:\"pre\"},{}),\"XpayUtils.serverSetting = ServerSetting.LIVE\\n\")),Object(i.a)(\"p\",null,\"to switch back to the test server:\"),Object(i.a)(\"pre\",null,Object(i.a)(\"code\",Object(a.a)({parentName:\"pre\"},{}),\"XpayUtils.serverSetting = ServerSetting.TEST\\n\")))}p.isMDXComponent=!0},96:function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n=\"function\"==typeof e?e(t):l(l({},t),e)),n},u={inlineCode:\"code\",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),d=p(n),m=a,y=d[\"\".concat(o,\".\").concat(m)]||d[m]||u[m]||i;return n?r.a.createElement(y,l(l({ref:t},c),{},{components:n})):r.a.createElement(y,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if(\"string\"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType=\"string\"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName=\"MDXCreateElement\"}}]);","name":"c665ac6b.17ea488c.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[15],{\n\n/***/ 86:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightToc\", function() { return rightToc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96);\nvar frontMatter={id:'installation',title:'Introduction'};var metadata={\"unversionedId\":\"android-sdk/installation\",\"id\":\"android-sdk/installation\",\"isDocsHomePage\":false,\"title\":\"Introduction\",\"description\":\"XPay KotlinUtils is an SDK for integrating payments through XPay with android development written in kotlin.\",\"source\":\"@site/docs/android-sdk/installation.mdx\",\"slug\":\"/android-sdk/installation\",\"permalink\":\"/docs/android-sdk/installation\",\"version\":\"current\",\"sidebar\":\"docs\",\"previous\":{\"title\":\"Woo-Commerce XPay Plugin\",\"permalink\":\"/docs/woo-commerce\"},\"next\":{\"title\":\"XpayUtils\",\"permalink\":\"/docs/android-sdk/xpayutils\"}};/* @jsxRuntime classic */ /* @jsx mdx */var rightToc=[{value:'Installation',id:'installation',children:[]},{value:'Usage',id:'usage',children:[{value:'Make payment',id:'make-payment',children:[]},{value:'Get transaction info',id:'get-transaction-info',children:[]}]},{value:'Switching to Production server',id:'switching-to-production-server',children:[]}];var layoutProps={rightToc:rightToc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,[\"components\"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(MDXLayout,Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"p\",null,\"XPay KotlinUtils is an SDK for integrating payments through XPay with android development written in kotlin.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"h2\",{\"id\":\"installation\"},\"Installation\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"p\",null,\"KotlinUtils is available through jitpack\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"ol\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"li\",{parentName:\"ol\"},\"Add the following line in your root build.gradle at the end of repositories:\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"code\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{}),\"allprojects {\\n    repositories {\\n        ...\\n        maven { url 'https://jitpack.io' }\\n    }\\n}\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"ol\",{\"start\":2},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"li\",{parentName:\"ol\"},\"Add the dependencies\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"code\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{}),\"dependencies {\\n    implementation 'com.github.xpayeg:Android-kotlin-sdk:1.0'\\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'\\n    implementation \\\"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha02\\\"\\n}\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"p\",null,\"Click \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"a\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"p\"},{\"href\":\"https://jitpack.io/#xpayeg/Android-kotlin-sdk\"}),\"here\"),\" for more installation options other than gradle.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"h2\",{\"id\":\"usage\"},\"Usage\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"h3\",{\"id\":\"make-payment\"},\"Make payment\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"code\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{\"className\":\"language-java\"}),\"import com.xpay.kotlinutils.XpayUtils\\nimport com.xpay.kotlinutils.models.BillingInfo\\n\\n// set XpayUtils core settings\\n// The following settings are for testing purposes only\\nXpayUtils.apiKey = \\\"Cce74Y3B.J0P4tItq7hGu2ddhCB0WF5ND1eTubkpT\\\"\\nXpayUtils.communityId = \\\"m2J7eBK\\\"\\nXpayUtils.apiPaymentId = 60\\n// default server settings are testing servers which is equivalent to\\n// XpayUtils.serverSetting = ServerSetting.TEST\\n\\nlifecycleScope.launch {\\n    try {\\n        val res = XpayUtils.prepareAmount(50)\\n        // read active payment methods list and set payUsing property\\n        // this test community returns CARD and KIOSK payment options\\n        // the following line is equivalent to XpayUtils.payUsing = XpayUtils.activePaymentMethods[0]\\n        XpayUtils.payUsing = PaymentMethods.CARD\\n        // read the total amount of card payment\\n        // this is also equivalent to\\n        // val totalAmount = res?.totalAmount!!\\n        val totalAmount = XpayUtils.PaymentOptionsTotalAmounts?.card!!\\n        // set billing information\\n        XpayUtils.billingInfo = BillingInfo( \\\"John Doe\\\", \\\"j.doe@test.com\\\", \\\"+201111111111\\\")\\n        // make payment\\n        val paymentRespone = XpayUtils.pay()\\n        // get payment form url and navigate to it to complete your payment\\n        val formUrl = paymentRespone?.iframe_url!!\\n        val builder = CustomTabsIntent.Builder()\\n        builder.setToolbarColor(resources.getColor(R.color.colorPrimary))\\n        builder.setShowTitle(true)\\n        val customTabsIntent: CustomTabsIntent = builder.build()\\n        customTabsIntent.launchUrl(this@MainActivity, Uri.parse(response.iframe_url))\\n        //in case of KIOSK payment method, read the message respone which contains your payment reference number from AMAN\\n        // val formUrl = paymentRespone?.message!!\\n\\n        // that's it !\\n    } catch (e: Exception) {\\n        e.message?.let { msg -> displayError(msg) }\\n    }\\n}\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"h3\",{\"id\":\"get-transaction-info\"},\"Get transaction info\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"code\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{\"className\":\"language-java\"}),\"import com.xpay.kotlinutils.XpayUtils\\n\\n// set XpayUtils core settings\\n// The following settings are for testing purposes only\\nXpayUtils.apiKey = \\\"Cce74Y3B.J0P4tItq7hGu2ddhCB0WF5ND1eTubkpT\\\";\\nXpayUtils.communityId = \\\"m2J7eBK\\\";\\nXpayUtils.apiPaymentId = 60;\\n// default server settings are testing servers which is equivalent to\\n// XpayUtils.serverSetting = ServerSetting.TEST\\n\\nlifecycleScope.launch {\\n    try {\\n        val response = XpayUtils.getTransaction(it)\\n        // read transaction status and amount\\n        val status = respone.status\\n        val totalAmount = respone.total_amount\\n\\n        // that's it !\\n    } catch (e: Exception) {\\n        e.message?.let { errMsg -> displayError(errMsg) }\\n    }\\n}\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"h2\",{\"id\":\"switching-to-production-server\"},\"Switching to Production server\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"p\",null,\"By default XpayUtils will make all the requests to XPay testing server, to switch to Production server set \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"inlineCode\",{parentName:\"p\"},\"XpayUtils.serverSetting\"),\" property to \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"inlineCode\",{parentName:\"p\"},\"ServerSetting.LIVE\"),\".\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"code\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{}),\"XpayUtils.serverSetting = ServerSetting.LIVE\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"p\",null,\"to switch back to the test server:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"a\"])(\"code\",Object(_home_samir_xpay_docs_XPay_Docs_new_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{}),\"XpayUtils.serverSetting = ServerSetting.TEST\\n\")));};MDXContent.isMDXComponent=true;\n\n/***/ }),\n\n/***/ 96:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export MDXContext */\n/* unused harmony export MDXProvider */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createElement; });\n/* unused harmony export useMDXComponents */\n/* unused harmony export withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}