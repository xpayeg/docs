(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),y=a,m=d["".concat(o,".").concat(y)]||d[y]||u[y]||i;return n?r.a.createElement(m,s(s({ref:t},l),{},{components:n})):r.a.createElement(m,s({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(106)),o={id:"installation",title:"Introduction"},s={unversionedId:"ios-sdk/installation",id:"ios-sdk/installation",isDocsHomePage:!1,title:"Introduction",description:"XPaySwiftSDK is an SDK for integrating payments through XPay with IOS development written in Swift.",source:"@site/docs/ios-sdk/installation.mdx",slug:"/ios-sdk/installation",permalink:"/docs/ios-sdk/installation",version:"current",sidebar:"docs",previous:{title:"Errors reference",permalink:"/docs/android-sdk/sdk-errors"},next:{title:"Demo",permalink:"/docs/ios-sdk/example"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Make payment",id:"make-payment",children:[]}]},{value:"Switching to Production server",id:"switching-to-production-server",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.a)("p",null,"XPaySwiftSDK is an SDK for integrating payments through XPay with IOS development written in Swift."),Object(i.a)("h2",{id:"installation"},"Installation"),Object(i.a)("p",null,"KotlinUtils is available through jitpack"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"Add the following line in your pod file at the end of repositories:")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{}),"pod 'XPaySwiftSDK', :git => 'https://github.com/xpayeg/XPaySwiftSDK.git'\n")),Object(i.a)("h2",{id:"usage"},"Usage"),Object(i.a)("h3",{id:"make-payment"},"Make payment"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-Swift"}),'\nimport UIKit\nimport XPaySwiftSDK\n\nclass ViewController: UIViewController {\n    // => Add this\n    var xpayUtils: XPayUtils!\n\n    override func viewDidLoad() {\n      super.viewDidLoad()\n\n      // => Add this\n      xpayUtils = XPayUtils(\n        from: self,                          // ViewController instance\n        sdkMode: XPaySDKMode.DEVELOPMENT,    // XPaySDKMode.LIVE for production mode\n        apiKey: "API_KEY",                   // Your api key, Create an api key => https://xpayeg.github.io/docs/api-key\n        apiPaymentId: 1,                     // Your api payment id, Create an api payment id => https://xpayeg.github.io/docs/api-payments\n        communityId: "COMMUNITY_ID"          // Your community id, Get your community id => https://xpayeg.github.io/docs/community-id\n      )\n\n    }\n\n    @objc func payNow() {\n      xpayUtils.makePayment(\n        amount: 100.0,                        // Float\n        originalAmount: 100.0,                // Float\n        payUsing: XPayPaymentMethod.card,     // XPayPaymentMethod.card || XPayPaymentMethod.fawry || XPayPaymentMethod.meezaDigital\n        billingData: (\n          name: "Full Name",             // String, Must match Regex("^[a-zA-Z\\\\u0621-\\\\u064A-]{3,}(?:\\\\s[a-zA-Z\\\\u0621-\\\\u064A-]{3,})+\\$")\n          email: "email@email.com",      // String, Must match Regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z.-]+[.][a-zA-Z]{2,4}\\$")\n          phoneNumber: "+201112223330"   // String, Must match Regex("^\\\\+[0-9]{7,15}\\$")\n        )\n      ){ [weak self] result in\n        DispatchQueue.main.async {\n          switch result {\n            case .success(let data):\n                print("Data: \\(data)")\n                // Handle success, e.g., update UI or display a message\n                self?.getTransactionDetails(transactionUUID: data.transactionUUID)\n            case .failure(let error):\n                print("Error: \\(error.localizedDescription)")\n                // Handle error, e.g., show an alert\n          }\n        }\n      }\n    }\n    @objc func getTransactionDetails(transactionUUID: String) {\n      xpayUtils.getTransaction(\n        transactionUUID: transactionUUID\n      ){ [weak self] result in\n        DispatchQueue.main.async {\n          switch result {\n            case .success(let data):\n                print("Data: \\(data)")\n                // Handle success, e.g., update UI or display a message\n            case .failure(let error):\n                print("Error: \\(error.localizedDescription)")\n                // Handle error, e.g., show an alert\n          }\n        }\n      }\n    }\n}\n\n')),Object(i.a)("h2",{id:"switching-to-production-server"},"Switching to Production server"),Object(i.a)("p",null,"By default XpayUtils will make all the requests to XPay testing server, to switch to Production server change sdkMode to XPaySDKMode.LIVE."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{}),'xpayUtils = XPayUtils(\nfrom: self,\nsdkMode: XPaySDKMode.LIVE,\napiKey: "API_KEY",\napiPaymentId: 1,\ncommunityId: "COMMUNITY_ID"\n)```\n')))}p.isMDXComponent=!0}}]);